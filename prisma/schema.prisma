datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserSubmission {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  websiteUrl       String?
  selectedPackage  String
  additionalServices AdditionalService[]
  createdAt        DateTime  @default(now())

  @@map("user_submissions")
}

model AdditionalService {
  id               Int      @id @default(autoincrement())
  serviceName      String
  userSubmissionId Int
  userSubmission   UserSubmission @relation(fields: [userSubmissionId], references: [id], onDelete: Cascade)

  @@map("additional_services")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  hasPaid       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  hasProject  Boolean  @default(false)
  projectId   String?  // Store the Freelancer project ID
  hasBid      Boolean  @default(false)
  threadID    String?  // Store the Freelancer project ID
  hasMilestone Boolean @default(false)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  hasBooked     Boolean  @default(false)
  phone         String?
  date          String?
  time          String?
  status        String   @default("pending") // New field
}